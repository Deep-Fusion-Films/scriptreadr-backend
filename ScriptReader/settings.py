"""
Django settings for ScriptReader project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import dj_database_url
import os
import json
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y*ke@he8qvcp(7137)*k37(o=spu49cpjs%fpcgj!3%00h-4di'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
     "localhost",
    "127.0.0.1",
    "scriptreadr-backend-production.up.railway.app",
]


# Application definition

ELEVEN_LABS_API_KEY=config("ELEVEN_LABS_API_KEY")

VOICE_ID=config("VOICE_ID")

GOOGLE_CLIENT_ID=config("GOOGLE_CLIENT_ID")

GOODLE_CLIENT_SECRET=config("GOODLE_CLIENT_SECRET")

RESEND_API_KEY=config("RESEND_API_KEY")

TOKEN_ACCESS_SECRET=config("TOKEN_ACCESS_SECRET")

TOKEN_REFRESH_SECRET=config("TOKEN_REFRESH_SECRET")

FRONTEND_BASE_URL=config("FRONTEND_BASE_URL")

STRIPE_PUBLISHABLE_KEY=config("STRIPE_PUBLISHABLE_KEY")

STRIPE_SECRETE_KEY=config("STRIPE_SECRETE_KEY")

STRIPE_ONE_OFF_PRICE_ID=config("STRIPE_ONE_OFF_PRICE_ID")
STRIPE_STARTER_PRICE_ID=config("STRIPE_STARTER_PRICE_ID")
STRIPE_PRO_PRICE_ID=config("STRIPE_PRO_PRICE_ID")
STRIPE_STUDIO_PRICE_ID=config("STRIPE_STUDIO_PRICE_ID")

# GOOGLE_APPLICATION_CREDENTIALS = config("GOOGLE_APPLICATION_CREDENTIALS")


# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = config('GOOGLE_APPLICATION_CREDENTIALS')

google_credentials = config('GOOGLE_APPLICATION_CREDENTIALS')

try:
    #if it looks like Json (on render)
    if google_credentials.strip().startswith('{'):
        GCS_CREDENTIALS_INFO = json.loads(google_credentials)
        GOOGLE_CLOUD_CREDENTIALS = service_account.Credentials.from_service_account_info(GCS_CREDENTIALS_INFO)
    else:
        #if it is a file path(local)
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = google_credentials
        GOOGLE_CLOUD_CREDENTIALS = None
except Exception as e:
    raise Exception(f"Error loading Google Clouds credentials: {str(e)}")



STRIPE_WEBHOOK_SECRET=config('STRIPE_WEBHOOK_SECRET')
STRIPE_REDIRECT_LINK=config('STRIPE_REDIRECT_LINK')

GCS_BUCKET_NAME=config('GCS_BUCKET_NAME')


#celery configuration
CELERY_BROKER_URL = config("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

#fix timezone drift
TIME_ZONE = 'UTC' #Ensures django uses UTC
USE_TZ = True #Enables timezone support

#Celery-specific timezone config
CELERY_ENABLE_UTC = True #Ensure Celery uses UTC internally
CELERY_TIMEZONE = 'UTC' #Explicitly set Celery timezone to UTC





INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'user',
    'fileUpload',
    'tts',
    'corsheaders',
    'subscription',
    'contact',
    'rest_framework_simplejwt.token_blacklist',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# CORS_ALLOW_ALL_ORIGINS = True


CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://scriptreadr-frontend.vercel.app"
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
}


# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^http://localhost:5173$",
#     r"^https://.*\.vercel\.app$",  # Optional if you test from Vercel later
# ]

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://scriptreadr-frontend.vercel.app"
]


ROOT_URLCONF = 'ScriptReader.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ScriptReader.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': dj_database_url.parse(
        config('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True,
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

AUTH_USER_MODEL ='user.User'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
